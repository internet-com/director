# redirect errors to Docker daemon
error_log  /dev/stderr warn;
user  nginx;

# more resources for a proxying server
worker_processes  8;
worker_rlimit_nofile 16384;
events {
  worker_connections  16384;
}


http {
  server_tokens off;

  # docker built-in user defined network DNS listens on 127.0.0.11
  resolver 127.0.0.11 ipv6=off valid=15s;

  # no need for access logging in the reverse proxy by default
  access_log off;
  log_not_found off;

  # now stable magic for more efficient network utilization
  sendfile     on;
  tcp_nopush   on;
  tcp_nodelay  on;

  # increasing this leads to high number of simultaneously open sockets
  keepalive_timeout  65;

  # standard redirect to the main domain
  # to prevent scam links and improve SEO
  server {
    listen 80 default_server;
    return 301 https://www.example.com/;
  }

  server {
    listen 80;
    server_name
      www.example.com
      demo.example.com;

    location /health-check {
      return 200 "I'm healthy!";
    }

    location / {
      # Proxy to the main `master` docker container in user defined network
      # Intermediate variable is needed to allow nginx to start
      # without first resolving the `master` host name to a fixed IP.
      set $variant_container 'master';
      proxy_pass http://$variant_container;
      proxy_set_header  'Host' $host;
    }
  }

  server {
    listen 80;
    # limit container name with a prefix and restrictive
    # char list to prevent this attack:
    # http://google.com.demo.example.com.de/
    # http://director.www.example.com/
    server_name
      ~^(?<variant_container>v\w+)\.(?<variant_domain>www\.example\.com)$
      ~^(?<variant_container>v\w+)\.(?<variant_domain>demo\.example\.com)$;

    # in case you use AWS Load Balancer with health checking
    location /health-check {
      return 200 "I'm healthy!";
    }

    location / {
      # proxy to a docker container in user defined network `director_versions`
      proxy_pass http://$variant_container;
      # this is a received hostname from browser
      # so the application knows its real URL
      proxy_set_header  'Host' $host;
      # redirect to master variant in case of a stale container link
      # or any other network errors on the way to the variant container
      error_page 502 =302 $scheme://$variant_domain$request_uri;
    }
  }
}
